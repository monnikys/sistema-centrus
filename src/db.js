import Dexie from 'dexie' // Importar Dexie.js para gerenciamento de IndexedDB

export const db = new Dexie('SistemaFuncionarios') // Nome do banco de dados

db.version(21).stores({
  // Incrementar a vers√£o do banco de dados
  funcionarios:
    '++id, nome, cpf, cargo, departamento',
  documentos:
    '++id, funcionarioId, categoria, nomeArquivo, dataUpload, mes, ano, dataInicio, dataFim',
  documentosEmpresa:
    '++id, funcionarioId, categoriaEmpresa, nomeArquivo, dataUpload, mes, ano, fixado',
  solicitacoesViagem:
    '++id, solicitanteId, viajanteId, origem, destino, dataIda, horarioIdaInicio, horarioIdaFim, dataVolta, horarioVoltaInicio, horarioVoltaFim, justificativa, observacao, status, dataSolicitacao, motivoRecusa',
  notificacoes:
    '++id, tipo, titulo, mensagem, lida, dataCreacao, dados, usuarioId',
  })

export const CATEGORIAS = {
  // Definir categorias de documentos
  ABONO_ASSIDUIDADE: 'Abono de Assiduidade', // Chave para ABONO_ASSIDUIDADE
  ATESTADO_MEDICO: 'Atestado M√©dico', // Chave para ATESTADO_MEDICO
  ATESTADO_COMPARECIMENTO: 'Atestado de Comparecimento', // Chave para ATESTADO_COMPARECIMENTO
  FERIAS: 'F√©rias', // Chave para FERIAS
  AJUSTE_PONTO: 'Ajuste de Ponto', // Chave para AJUSTE_PONTO
  LICENCA_MATERNIDADE_PATERNIDADE: 'Licen√ßa Maternidade/Paternidade', // Chave para LICEN√áA_MATERNIDADE
  LICENCA_NOJO: 'Licen√ßa Nojo', // Chave para LICEN√áA_NOJO
  LICENCA_GALA: 'Licen√ßa Gala', // Chave para LICENCA_GALA
  JUSTICA_ELEITORAL: 'Justica Eleitoral', // Chave para JUSTICA_ELEITORAL
  DOACAO_SANGUE: 'Doa√ß√£o de Sangue', // Chave para DOACAO_SANGUE
}

export const CATEGORIAS_EMPRESA = {
  // Definir categorias de documentos da empresa
  INCLUSAO_CONVENIO: 'Inclus√£o do Conv√™nio', // Chave para INCLUSAO_CONVENIO
  EXCLUSAO_CONVENIO: 'Exclus√£o do Conv√™nio', // Chave para EXCLUSAO_CONVENIO
  PASSAGENS_AEREAS: 'Passagens A√©reas', // Chave para PASSAGENS_AEREAS
}

export const DEPARTAMENTOS = [
  'PRESI','DIRAP','DIBEN','GECAP','GECON','GEINF','GECOR','GEOPE','GETEC',
  'GEFIN','GEBEN','GERIS','SELOG','SEFOP','SECON','SEBEN','SECAB','SECRE',
  'SETES','SEMEF','SESUP','SEFIN','SEDES','AUDIT','COJUR',
]

export const CARGOS = [
  'Advogada Jr. B','Advogada Sr. D','Advogado Pl. E','Advogado Sr. E','Analista Jr. A',
  'Analista Jr. B','Analista Jr. C','Analista Jr. D','Analista Jr. E','Analista Jr. F',
  'Analista Pl. A','Analista Pl. B','Analista Pl. C','Analista Pl. E','Analista Pl. F',
  'Analista Sr. A','Analista Sr. B','Analista Sr. C','Analista Sr. D','Analista Sr. E',
  'Analista Sr. F','Diretor','Estagi√°rio','Gerente',
]

export const AEROPORTOS = [
  {
    nome: 'Aeroporto de S√£o Paulo - Guarulhos',
    iata: 'GRU',
    icao: 'SBGR',
  },
  { nome: 'Aeroporto de S√£o Paulo - Congonhas', iata: 'CGH', icao: 'SBSP' },
  { nome: 'Aeroporto de Bras√≠lia', iata: 'BSB', icao: 'SBBR' },
  {
    nome: 'Aeroporto do Rio de Janeiro - Gale√£o',
    iata: 'GIG',
    icao: 'SBGL',
  },
  {
    nome: 'Aeroporto de Campinas - Viracopos',
    iata: 'VCP',
    icao: 'SBKP',
  },
  {
    nome: 'Aeroporto de Belo Horizonte - Confins',
    iata: 'CNF',
    icao: 'SBCF',
  },
  {
    nome: 'Aeroporto do Recife - Guararapes',
    iata: 'REC',
    icao: 'SBRF',
  },
  { nome: 'Aeroporto de Salvador', iata: 'SSA', icao: 'SBSV' },
  {
    nome: 'Aeroporto do Rio de Janeiro - Santos Dumont',
    iata: 'SDU',
    icao: 'SBRJ',
  },
  {
    nome: 'Aeroporto de Curitiba -Afonso Pena',
    iata: 'CWB',
    icao: 'SBCT',
  },
  { nome: 'Aeroporto de Fortaleza', iata: 'FOR', icao: 'SBFZ' },
  {
    nome: 'Aeroporto de Florian√≥polis',
    iata: 'FLN',
    icao: 'SBFL',
  },
  {
    nome: 'Aeroporto de Bel√©m - Val de Cans',
    iata: 'BEL',
    icao: 'SBBE',
  },
  {
    nome: 'Aeroporto de Goi√¢nia - Santa Genoveva',
    iata: 'GYN',
    icao: 'SBGO',
  },
  {
    nome: 'Aeroporto de Porto Alegre',
    iata: 'POA',
    icao: 'SBPA',
  },
  {
    nome: 'Aeroporto de Vit√≥ria - Eurico de Aguiar Salles',
    iata: 'VIX',
    icao: 'SBVT',
  },
  {
    nome: 'Aeroporto de Manaus - Eduardo Gomes',
    iata: 'MAO',
    icao: 'SBEG',
  },
  {
    nome: 'Aeroporto de Cuiab√° - Marechal Rondon',
    iata: 'CGB',
    icao: 'SBCY',
  },
  {
    nome: 'Aeroporto de Macei√≥ - Zumbi dos Palmares',
    iata: 'MCZ',
    icao: 'SBMO',
  },
  {
    nome: 'Aeroporto de Natal - Governador Alu√≠zio Alves',
    iata: 'NAT',
    icao: 'SBNT',
  },
]

export const DOCUMENTOS_EXEMPLO = {
  // Adicionar documentos de exemplo
  INCLUSAO_CONVENIO: [
    // Chave para INCLUSAO_CONVENIO
    {
      nomeArquivo: 'Modelo_Inclusao_Bradesco.pdf', // Arquivo do documento
      descricao:
        'Modelo de documento para inclus√£o de dependentes no conv√™nio Bradesco', // Descri√ß√£o do documento
    },
    {
      nomeArquivo: 'Checklist_Documentacao_Convenio.pdf', // Arquivo do documento
      descricao:
        'Lista completa de documentos necess√°rios para inclus√£o no conv√™nio', // Descri√ß√£o do documento
    },
  ],
}

export const STATUS_VIAGEM = {
  // Definir status de viagem
  PENDENTE: 'Pendente', // Chave para PENDENTE
  APROVADA: 'Aprovada', // Chave para APROVADA
  RECUSADA: 'Recusada', // Chave para RECUSADA
}

// ==================== SERVI√áO DE NOTIFICA√á√ïES ====================

export const notificacaoService = {
  /**
   * Criar uma nova notifica√ß√£o
   * @param {string} tipo - Tipo da notifica√ß√£o: 'viagem', 'documento', 'alerta', 'info'
   * @param {string} titulo - T√≠tulo da notifica√ß√£o
   * @param {string} mensagem - Mensagem detalhada
   * @param {object} dados - Dados adicionais (opcional)
   * @param {number} usuarioId - ID do usu√°rio que receber√° a notifica√ß√£o (opcional)
   */
  async criar(tipo, titulo, mensagem, dados = {}, usuarioId = null) {
    try {
      const notificacao = {
        tipo,
        titulo,
        mensagem,
        lida: false,
        dataCreacao: new Date().toISOString(),
        dados,
        usuarioId,
      }

      const id = await db.notificacoes.add(notificacao)
      console.log('‚úÖ Notifica√ß√£o criada:', { id, ...notificacao })
      return { id, ...notificacao }
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o:', error)
      throw error
    }
  },

  /**
   * Buscar todas as notifica√ß√µes
   */
  async buscarTodas() {
    try {
      return await db.notificacoes.orderBy('dataCreacao').reverse().toArray()
    } catch (error) {
      console.error('‚ùå Erro ao buscar notifica√ß√µes:', error)
      return []
    }
  },

  /**
   * Buscar notifica√ß√µes n√£o lidas
   */
  async buscarNaoLidas() {
    try {
      return await db.notificacoes.where('lida').equals(false).toArray()
    } catch (error) {
      console.error('‚ùå Erro ao buscar notifica√ß√µes n√£o lidas:', error)
      return []
    }
  },

  /**
   * Contar notifica√ß√µes n√£o lidas
   */
  async contarNaoLidas() {
    try {
      return await db.notificacoes.where('lida').equals(false).count()
    } catch (error) {
      console.error('‚ùå Erro ao contar notifica√ß√µes n√£o lidas:', error)
      return 0
    }
  },

  /**
   * Marcar notifica√ß√£o como lida
   */
  async marcarComoLida(id) {
    try {
      await db.notificacoes.update(id, { lida: true })
      console.log('‚úÖ Notifica√ß√£o marcada como lida:', id)
    } catch (error) {
      console.error('‚ùå Erro ao marcar notifica√ß√£o como lida:', error)
    }
  },

  /**
   * Marcar todas as notifica√ß√µes como lidas
   */
  async marcarTodasComoLidas() {
    try {
      const naoLidas = await this.buscarNaoLidas()
      const promises = naoLidas.map((n) => this.marcarComoLida(n.id))
      await Promise.all(promises)
      console.log('‚úÖ Todas as notifica√ß√µes marcadas como lidas')
    } catch (error) {
      console.error('‚ùå Erro ao marcar todas como lidas:', error)
    }
  },

  /**
   * Excluir notifica√ß√£o
   */
  async excluir(id) {
    try {
      await db.notificacoes.delete(id)
      console.log('‚úÖ Notifica√ß√£o exclu√≠da:', id)
    } catch (error) {
      console.error('‚ùå Erro ao excluir notifica√ß√£o:', error)
    }
  },

  /**
   * Excluir todas as notifica√ß√µes
   */
  async excluirTodas() {
    try {
      await db.notificacoes.clear()
      console.log('‚úÖ Todas as notifica√ß√µes exclu√≠das')
    } catch (error) {
      console.error('‚ùå Erro ao excluir todas as notifica√ß√µes:', error)
    }
  },

  // ========== NOTIFICA√á√ïES ESPEC√çFICAS DE VIAGEM ==========

  /**
   * Criar notifica√ß√£o de nova solicita√ß√£o de viagem
   */
  async notificarNovaViagem(viagemId, nomeViajante, destino) {
    return await this.criar(
      'viagem',
      '‚úàÔ∏è Nova Solicita√ß√£o de Viagem',
      `${nomeViajante} solicitou uma viagem para ${destino}`,
      { viagemId, acao: 'nova_viagem' }
    )
  },

  /**
   * Criar notifica√ß√£o de viagem aprovada
   */
  async notificarViagemAprovada(viagemId, nomeViajante, destino) {
    return await this.criar(
      'viagem',
      '‚úÖ Viagem Aprovada',
      `A viagem de ${nomeViajante} para ${destino} foi aprovada`,
      { viagemId, acao: 'viagem_aprovada' }
    )
  },

  /**
   * Criar notifica√ß√£o de viagem recusada
   */
  async notificarViagemRecusada(viagemId, nomeViajante, destino, motivo) {
    return await this.criar(
      'viagem',
      '‚ùå Viagem Recusada',
      `A viagem de ${nomeViajante} para ${destino} foi recusada. Motivo: ${motivo}`,
      { viagemId, acao: 'viagem_recusada', motivo }
    )
  },

  /**
   * Criar notifica√ß√£o de documento enviado
   */
  async notificarDocumentoEnviado(documentoId, nomeFuncionario, categoria) {
    return await this.criar(
      'documento',
      'üìÑ Novo Documento',
      `Documento ${categoria} enviado para ${nomeFuncionario}`,
      { documentoId, acao: 'documento_enviado' }
    )
  },
} 