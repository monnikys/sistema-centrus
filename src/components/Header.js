// src/components/Header.js
import React, { useState, useEffect } from 'react'
import Notificacoes from './Notificacoes'
import {
  LayoutDashboard,
  Users,
  Plane,
  Building2,
  Download,
  UserPlus,
  UserCog,
  LogOut,
} from 'lucide-react'

// Defini√ß√£o de todas as p√°ginas com suas permiss√µes
const PAGINAS_SISTEMA = [
  {
    id: 'dashboard',
    nome: 'Dashboard',
    icone: LayoutDashboard,
    permissaoId: null, // Dashboard sempre vis√≠vel para todos
    categoria: null,
  },
  {
    id: 'funcionarios',
    nome: 'Funcion√°rios',
    icone: Users,
    permissaoId: 'lista_funcionarios',
    categoria: null,
  },
  {
    id: 'novo-funcionario',
    nome: 'Novo Funcion√°rio',
    icone: UserPlus,
    permissaoId: 'cadastro_funcionarios',
    categoria: 'modulos',
  },
  {
    id: 'solicitacao-viagem',
    nome: 'Solicita√ß√£o Viagem',
    icone: Plane,
    permissaoId: 'solicitacao_viagem',
    categoria: 'modulos',
  },
  {
    id: 'docs-empresa',
    nome: 'Docs Empresa',
    icone: Building2,
    permissaoId: 'documentos_empresa',
    categoria: 'modulos',
  },
  {
    id: 'download-massa',
    nome: 'Download em Massa',
    icone: Download,
    permissaoId: 'relatorios',
    categoria: 'modulos',
  },
  {
    id: 'usuarios',
    nome: 'Gerenciar Usu√°rios',
    icone: UserCog,
    permissaoId: 'gerenciar_usuarios',
    categoria: 'admin',
  },
]

function Header({ usuario, onLogout, paginaAtual, onMudarPagina }) {
  // Componente de cabe√ßalho/sidebar com navega√ß√£o
  const [paginasPermitidas, setPaginasPermitidas] = useState([]) // P√°ginas que o usu√°rio pode acessar

  useEffect(() => {
    // Carregar as p√°ginas permitidas quando o usu√°rio mudar
    console.log('üîÑ Header: useEffect disparado')
    console.log('üë§ Usu√°rio recebido:', usuario)
    carregarPaginasPermitidas()
  }, [usuario]) // Depend√™ncia: usuario

  const carregarPaginasPermitidas = () => {
    // Fun√ß√£o para filtrar as p√°ginas com base nas permiss√µes do usu√°rio
    console.log('üîç Iniciando carregamento de p√°ginas permitidas...')

    if (!usuario) {
      console.log('‚ùå Nenhum usu√°rio logado')
      setPaginasPermitidas([])
      return
    }

    console.log('üìä Dados do usu√°rio:')
    console.log('  - Nome:', usuario.nome)
    console.log('  - Tipo:', usuario.tipo)
    console.log('  - Permiss√µes:', usuario.permissoes)

    // Se for admin, mostrar todas as p√°ginas
    if (usuario.tipo === 'admin') {
      setPaginasPermitidas(PAGINAS_SISTEMA)
      console.log('üëë Admin: Todas as p√°ginas liberadas')
      console.log('  - Total de p√°ginas:', PAGINAS_SISTEMA.length)
      return
    }

    // Se for usu√°rio comum, filtrar pelas permiss√µes
    const permissoesUsuario = usuario.permissoes || []
    console.log('üîë Permiss√µes do usu√°rio:', permissoesUsuario)

    const paginasFiltradas = PAGINAS_SISTEMA.filter((pagina) => {
      // Dashboard sempre vis√≠vel
      if (pagina.permissaoId === null) {
        console.log('  ‚úÖ', pagina.nome, '- Sempre vis√≠vel (Dashboard)')
        return true
      }

      // Verificar se o usu√°rio tem a permiss√£o para esta p√°gina
      const temPermissao = permissoesUsuario.includes(pagina.permissaoId)
      console.log(
        '  ' + (temPermissao ? '‚úÖ' : '‚ùå'),
        pagina.nome,
        '- permissaoId:',
        pagina.permissaoId
      )
      return temPermissao
    })

    setPaginasPermitidas(paginasFiltradas)
    console.log('‚úÖ P√°ginas filtradas:', paginasFiltradas.length, 'p√°ginas')
    console.log(
      'üìã Lista de p√°ginas permitidas:',
      paginasFiltradas.map((p) => p.nome)
    )
  }

  // Separar p√°ginas por categoria
  const paginasPrincipais = paginasPermitidas.filter(
    (p) => p.categoria === null
  )
  const paginasModulos = paginasPermitidas.filter(
    (p) => p.categoria === 'modulos'
  )
  const paginasAdmin = paginasPermitidas.filter((p) => p.categoria === 'admin')

  console.log('üóÇÔ∏è P√°ginas separadas por categoria:')
  console.log('  - Principais:', paginasPrincipais.length)
  console.log('  - M√≥dulos:', paginasModulos.length)
  console.log('  - Admin:', paginasAdmin.length)

  return (
    <aside className="app-sidebar">
      {/* Logo e t√≠tulo */}
      <div className="sidebar-header">
        <h1>Sistema Centrus</h1>
        {/* DEBUG: Mostrar informa√ß√µes do usu√°rio */}
        <small
          style={{
            color: '#666',
            fontSize: '11px',
            marginTop: '5px',
            display: 'block',
          }}
        >
          {usuario?.tipo === 'admin'
            ? 'üëë Admin'
            : `üë§ ${paginasPermitidas.length} p√°ginas`}
        </small>
      </div>

      {/* Menu de navega√ß√£o */}
      <nav className="sidebar-menu">
        {/* P√°ginas principais (Dashboard e Funcion√°rios) */}
        {paginasPrincipais.map((pagina) => {
          const Icone = pagina.icone
          return (
            <button
              key={pagina.id}
              className={
                paginaAtual === pagina.id ? 'menu-item-active' : 'menu-item'
              }
              onClick={() => onMudarPagina(pagina.id)}
            >
              <Icone size={20} />
              <span>{pagina.nome}</span>
            </button>
          )
        })}

        {/* M√≥dulos - mostrar apenas se houver p√°ginas de m√≥dulos permitidas */}
        {paginasModulos.length > 0 && (
          <>
            <div className="menu-divider"></div>
            <div className="menu-section-title">M√≥dulos</div>

            {paginasModulos.map((pagina) => {
              const Icone = pagina.icone
              return (
                <button
                  key={pagina.id}
                  className={
                    paginaAtual === pagina.id ? 'menu-item-active' : 'menu-item'
                  }
                  onClick={() => onMudarPagina(pagina.id)}
                >
                  <Icone size={20} />
                  <span>{pagina.nome}</span>
                </button>
              )
            })}
          </>
        )}

        {/* Administra√ß√£o - mostrar apenas se houver p√°ginas admin permitidas */}
        {paginasAdmin.length > 0 && (
          <>
            <div className="menu-divider"></div>
            <div className="menu-section-title">Administra√ß√£o</div>

            {paginasAdmin.map((pagina) => {
              const Icone = pagina.icone
              return (
                <button
                  key={pagina.id}
                  className={
                    paginaAtual === pagina.id ? 'menu-item-active' : 'menu-item'
                  }
                  onClick={() => onMudarPagina(pagina.id)}
                >
                  <Icone size={20} />
                  <span>{pagina.nome}</span>
                </button>
              )
            })}
          </>
        )}

        {/* DEBUG: Mostrar se n√£o h√° p√°ginas */}
        {paginasPermitidas.length === 0 && (
          <div
            style={{
              padding: '20px',
              color: '#999',
              textAlign: 'center',
              fontSize: '12px',
            }}
          >
            Nenhuma p√°gina dispon√≠vel
          </div>
        )}
      </nav>

      {/* Informa√ß√µes do usu√°rio e logout */}
      <div className="sidebar-footer">
        <div className="user-info-sidebar">
          <div className="user-avatar">
            {usuario?.nome?.charAt(0).toUpperCase() || 'U'}
          </div>
          <div className="user-details">
            <span className="user-name">{usuario?.nome || 'Usu√°rio'}</span>
            <span className="user-role">
              {usuario?.tipo === 'admin' ? 'Administrador' : 'Usu√°rio'}
            </span>
          </div>
        </div>
        <button className="btn-logout" onClick={onLogout} title="Sair">
          <LogOut size={20} />
        </button>
      </div>
    </aside>
  )
}

export default Header
